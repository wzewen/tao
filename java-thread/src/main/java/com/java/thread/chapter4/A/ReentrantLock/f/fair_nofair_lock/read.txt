    锁Lock分为"公平锁"和"非公平锁"，公平锁标识线程获取锁的顺序是按照线程加锁的顺序类分配的，即先来先得的FIFO先进先出顺序。而非公平锁
就是一种获取锁的抢占机制，是随机获得锁的，和公平锁不一样的就是先来的不一定先得到锁，这个方式可能造成某些线程一直拿不到锁，结果也就不是
公平的了。

FairRun 公平锁
运行结果：
thread name:Thread-0, start ...
thread name:Thread-0, 获得锁 🔒
thread name:Thread-2, start ...
thread name:Thread-2, 获得锁 🔒
thread name:Thread-1, start ...
thread name:Thread-3, start ...
thread name:Thread-1, 获得锁 🔒
thread name:Thread-3, 获得锁 🔒
thread name:Thread-4, start ...
thread name:Thread-4, 获得锁 🔒
thread name:Thread-5, start ...
thread name:Thread-5, 获得锁 🔒
thread name:Thread-6, start ...
thread name:Thread-6, 获得锁 🔒
thread name:Thread-7, start ...
thread name:Thread-7, 获得锁 🔒
thread name:Thread-8, start ...
thread name:Thread-8, 获得锁 🔒
thread name:Thread-9, start ...
thread name:Thread-9, 获得锁 🔒

    由Thread-1, Thread-3，可明显看出获得锁的顺序和运行的顺序是一致的。

NotFairRun 非公平锁
运行结果：
thread name:Thread-0, start ...
thread name:Thread-0, 获得锁 🔒
thread name:Thread-1, start ...
thread name:Thread-3, start ...
thread name:Thread-2, start ...
thread name:Thread-1, 获得锁 🔒
thread name:Thread-4, start ...
thread name:Thread-4, 获得锁 🔒
thread name:Thread-3, 获得锁 🔒
thread name:Thread-2, 获得锁 🔒
thread name:Thread-5, start ...
thread name:Thread-5, 获得锁 🔒
thread name:Thread-6, start ...
thread name:Thread-6, 获得锁 🔒
thread name:Thread-7, start ...
thread name:Thread-7, 获得锁 🔒
thread name:Thread-8, start ...
thread name:Thread-8, 获得锁 🔒
thread name:Thread-9, start ...
thread name:Thread-9, 获得锁 🔒

    由Thread-4，运行和获取锁可以看出，先运行的未必先获取到锁。获取锁是随机的。

